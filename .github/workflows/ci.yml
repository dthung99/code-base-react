name: CI/CD Pipeline

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Define environment variables
env:
  NODE_VERSION: "22"

jobs:
  # Job 1: Code Quality & Tests
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Step 3: Cache node_modules
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 5: Run linting
      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      # Step 6: Run type checking
      - name: Type checking
        run: npx tsc --noEmit

      # Step 7: Run tests
      - name: Run tests
        run: npm run test
        continue-on-error: false

  # Job 2: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test # Only run if tests pass

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      # Step 3: Cache node_modules
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 5: Build application
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      # Step 6: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

      # Step 7: Analyze bundle size
      - name: Analyze bundle size
        run: |
          du -sh dist/* > build-size.txt
          echo "Build size analysis:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-size.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 3: Security Check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: [test, build] # Run after both test and build pass

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate
